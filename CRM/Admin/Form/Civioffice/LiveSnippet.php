<?php
/*-------------------------------------------------------+
| SYSTOPIA CiviOffice Integration                        |
| Copyright (C) 2020 SYSTOPIA                            |
| Author: J. Schuppe (schuppe@systopia.de)               |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL license. You can redistribute it and/or     |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+-------------------------------------------------------*/

use CRM_Civioffice_ExtensionUtil as E;

class CRM_Admin_Form_CiviOffice_LiveSnippet extends CRM_Admin_Form
{
    protected $option_value;

    public function preProcess()
    {
        if (!$option_value_id = CRM_Utils_Request::retrieve('id', 'Integer', $this)) {
            throw new Exception(E::ts('Missing Live Snippet ID.'));
        }
        try {
            $option_group_id = civicrm_api3(
                'OptionGroup',
                'getvalue',
                [
                    'name' => 'civioffice_live_snippets',
                    'return' => 'id',
                ]
            );
            $this->option_value = civicrm_api3(
                'Optionvalue',
                'getsingle',
                [
                    'id' => $option_value_id,
                    'option_group_id' => $option_group_id,
                ]
            );
        } catch (Exception $exception) {
            throw new Exception(E::ts('Invalid Live Snippet ID.'));
        }
        if (!($this->_action & (CRM_Core_Action::UPDATE | CRM_Core_Action::ADD | CRM_Core_Action::UPDATE))) {
            throw new Exception(E::ts('Invalid action.'));
        }
        
        parent::preProcess();
    }

    public function buildForm()
    {
        if ($this->_action & (CRM_Core_Action::UPDATE | CRM_Core_Action::ADD)) {
            $this->add(
                'text',
                'label',
                E::ts('Label'),
                NULL,
                true
            );
            $this->add(
                'text',
                'name',
                E::ts('Name'),
                NULL,
                true
            );
            $this->setDefaults(
                [
                    'name' => $this->option_value['name'],
                    'label' => $this->option_value['label'],
                ]
            );
        }
        elseif ($this->_action & CRM_Core_Action::DELETE) {
            // TODO: Confirmation
        }

        parent::buildForm();
    }

    public function validate()
    {
        // TODO: Validate name field to be used as a token.

        return parent::validate(); // TODO: Change the autogenerated stub
    }

    public function postProcess()
    {
        // Create/update/delete OptionValue.
        civicrm_api3(
            'OptionValue',
            $this->getApiAction(),
            [
                'id' => $this->option_value['id'],
                'label' => $values['label'],
                'name' => $values['name']
            ]
        );

        // TODO: Update/delete contactSettings records when updating/deleting.

        parent::postProcess();
    }
}
